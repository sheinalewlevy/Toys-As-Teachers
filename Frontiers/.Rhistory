dislikeAB ~ binomial( 3, pAB ),
dislikeBA ~ binomial( 3, pBA ),
logit(pAB) <- a[1] + T[D,1] ,
logit(pBA) <- a[1] + T[D,2] ,
a ~ normal(0,1),
likeAB ~ binomial( 3, qAB ),
likeBA ~ binomial( 3, qBA ),
logit(pAB) <- a[2] + T2[D,1] ,
logit(pBA) <- a[2] + T2[D,2] ,
vector[2]: a ~ normal(0,1),
## gr matrix of varying effects
transpars> matrix[N_dyads,2]:T <-
compose_noncentered( rep_vector(sigma_T,2) , L_Rho_T , Z ), matrix[2,N_dyads]:Z ~ normal( 0 , 1 ), cholesky_factor_corr[2]:L_Rho_T ~ lkj_corr_cholesky( 2 ),
sigma_T ~ exponential(1),
transpars> matrix[N_dyads,2]:T2 <-
compose_noncentered( rep_vector(sigma_T2,2) , L_Rho_T2 , Z2 ), matrix[2,N_dyads]:Z2 ~ normal( 0 , 1 ), cholesky_factor_corr[2]:L_Rho_T2 ~ lkj_corr_cholesky( 2 ),
sigma_T2 ~ exponential(1),
## compute correlation matrix for dyads
gq> matrix[2,2]:Rho_T <<- Chol_to_Corr( L_Rho_T ) ,
gq> matrix[2,2]:Rho_T2 <<- Chol_to_Corr( L_Rho_T2)
)
n_dyads <- nrow(d)
monk_dat_2 <- list(
N_dyads = nrow(d),
D = d$dyad_id, dislikeAB = d$dislike_AB, dislikeBA = d$dislike_BA,likeAB = d$like_AB, likeBA = d$like_BA )
m2 <- ulam( f_dyad_2, data=monk_dat_2 , chains=4 , cores=4 , iter=2000 )
f_dyad_2 <-  alist(
dislikeAB ~ binomial( 3, pAB ),
dislikeBA ~ binomial( 3, pBA ),
logit(pAB) <- a[1] + T[D,1] ,
logit(pBA) <- a[1] + T[D,2] ,
likeAB ~ binomial( 3, qAB ),
likeBA ~ binomial( 3, qBA ),
logit(pAB) <- a[2] + T2[D,1] ,
logit(pBA) <- a[2] + T2[D,2] ,
vector[2]: a ~ normal(0,1),
## gr matrix of varying effects
transpars> matrix[N_dyads,2]:T <-
compose_noncentered( rep_vector(sigma_T,2) , L_Rho_T , Z ), matrix[2,N_dyads]:Z ~ normal( 0 , 1 ), cholesky_factor_corr[2]:L_Rho_T ~ lkj_corr_cholesky( 2 ),
sigma_T ~ exponential(1),
transpars> matrix[N_dyads,2]:T2 <-
compose_noncentered( rep_vector(sigma_T2,2) , L_Rho_T2 , Z2 ), matrix[2,N_dyads]:Z2 ~ normal( 0 , 1 ), cholesky_factor_corr[2]:L_Rho_T2 ~ lkj_corr_cholesky( 2 ),
sigma_T2 ~ exponential(1),
## compute correlation matrix for dyads
gq> matrix[2,2]:Rho_T <<- Chol_to_Corr( L_Rho_T ) ,
gq> matrix[2,2]:Rho_T2 <<- Chol_to_Corr( L_Rho_T2)
)
n_dyads <- nrow(d)
monk_dat_2 <- list(
N_dyads = nrow(d),
D = d$dyad_id, dislikeAB = d$dislike_AB, dislikeBA = d$dislike_BA,likeAB = d$like_AB, likeBA = d$like_BA )
m2 <- ulam( f_dyad_2, data=monk_dat_2 , chains=4 , cores=4 , iter=2000 )
f_dyad_2 <-  alist(
dislikeAB ~ binomial( 3, pAB ),
dislikeBA ~ binomial( 3, pBA ),
logit(pAB) <- a[1] + T[D,1] ,
logit(pBA) <- a[1] + T[D,2] ,
likeAB ~ binomial( 3, qAB ),
likeBA ~ binomial( 3, qBA ),
logit(qAB) <- a[2] + T2[D,1] ,
logit(qBA) <- a[2] + T2[D,2] ,
vector[2]: a ~ normal(0,1),
## gr matrix of varying effects
transpars> matrix[N_dyads,2]:T <-
compose_noncentered( rep_vector(sigma_T,2) , L_Rho_T , Z ), matrix[2,N_dyads]:Z ~ normal( 0 , 1 ), cholesky_factor_corr[2]:L_Rho_T ~ lkj_corr_cholesky( 2 ),
sigma_T ~ exponential(1),
transpars> matrix[N_dyads,2]:T2 <-
compose_noncentered( rep_vector(sigma_T2,2) , L_Rho_T2 , Z2 ), matrix[2,N_dyads]:Z2 ~ normal( 0 , 1 ), cholesky_factor_corr[2]:L_Rho_T2 ~ lkj_corr_cholesky( 2 ),
sigma_T2 ~ exponential(1),
## compute correlation matrix for dyads
gq> matrix[2,2]:Rho_T <<- Chol_to_Corr( L_Rho_T ) ,
gq> matrix[2,2]:Rho_T2 <<- Chol_to_Corr( L_Rho_T2)
)
n_dyads <- nrow(d)
monk_dat_2 <- list(
N_dyads = nrow(d),
D = d$dyad_id, dislikeAB = d$dislike_AB, dislikeBA = d$dislike_BA,likeAB = d$like_AB, likeBA = d$like_BA )
m2 <- ulam( f_dyad_2, data=monk_dat_2 , chains=4 , cores=4 , iter=2000 )
precis(m2,depth=3,pars=c("Rho_T","Rho_T2"))
post <- extract.samples(m2)
round(quantile( post$Rho_T2[,1,2] - post$Rho_T[,1,2] ),2)
round(mean( post$Rho_T2[,1,2] - post$Rho_T[,1,2] ),2)
PI( post$Rho_T2[,1,2] - post$Rho_T[,1,2] )
f_dyad_3 <-  alist(
dislikeAB ~ binomial( 3, pAB ),
dislikeBA ~ binomial( 3, pBA ),
logit(pAB) <- a[1] + T[D,1] + R[B,1] ,
logit(pBA) <- a[1] + T[D,2] + R[A,1],
likeAB ~ binomial( 3, qAB ),
likeBA ~ binomial( 3, qBA ),
logit(qAB) <- a[2] + T2[D,1] + R[B,2] ,
logit(qBA) <- a[2] + T2[D,2] + R[A,2],
vector[2]: a ~ normal(0,1),
## gr matrix of varying effects
transpars> matrix[N_dyads,2]:T <-
compose_noncentered( rep_vector(sigma_T,2) , L_Rho_T , Z ), matrix[2,N_dyads]:Z ~ normal( 0 , 1 ), cholesky_factor_corr[2]:L_Rho_T ~ lkj_corr_cholesky( 2 ),
sigma_T ~ exponential(1),
transpars> matrix[N_dyads,2]:T2 <-
compose_noncentered( rep_vector(sigma_T2,2) , L_Rho_T2 , Z2 ), matrix[2,N_dyads]:Z2 ~ normal( 0 , 1 ), cholesky_factor_corr[2]:L_Rho_T2 ~ lkj_corr_cholesky( 2 ),
sigma_T2 ~ exponential(1),
## R matrix of receiving effects transpars> matrix[18,2]:R <-
compose_noncentered( sigma_R , L_Rho_R , ZR ), matrix[2,18]:ZR ~ normal( 0 , 1 ), cholesky_factor_corr[2]:L_Rho_R ~ lkj_corr_cholesky( 2 ), vector[2]:sigma_R ~ exponential(1),
## compute correlation matrix for dyads
gq> matrix[2,2]:Rho_T <<- Chol_to_Corr( L_Rho_T ) ,
gq> matrix[2,2]:Rho_T2 <<- Chol_to_Corr( L_Rho_T2) ,
gq> matrix[2,2]:Rho_R <<- Chol_to_Corr( L_Rho_R )
)
n_dyads <- nrow(d)
monk_dat_3 <- list(
N_dyads = nrow(d),
D = d$dyad_id, dislikeAB = d$dislike_AB, dislikeBA = d$dislike_BA,likeAB = d$like_AB, likeBA = d$like_BA, A=d$A, B=d$B )
m2 <- ulam( f_dyad_3, data=monk_dat_3 , chains=4 , cores=4 , iter=2000 )
f_dyad_3 <-  alist(
dislikeAB ~ binomial( 3, pAB ),
dislikeBA ~ binomial( 3, pBA ),
logit(pAB) <- a[1] + T[D,1] + R[B,1] ,
logit(pBA) <- a[1] + T[D,2] + R[A,1],
likeAB ~ binomial( 3, qAB ),
likeBA ~ binomial( 3, qBA ),
logit(qAB) <- a[2] + T2[D,1] + R[B,2] ,
logit(qBA) <- a[2] + T2[D,2] + R[A,2],
vector[2]: a ~ normal(0,1),
## gr matrix of varying effects
transpars> matrix[N_dyads,2]:T <-
compose_noncentered( rep_vector(sigma_T,2) , L_Rho_T , Z ), matrix[2,N_dyads]:Z ~ normal( 0 , 1 ), cholesky_factor_corr[2]:L_Rho_T ~ lkj_corr_cholesky( 2 ),
sigma_T ~ exponential(1),
transpars> matrix[N_dyads,2]:T2 <-
compose_noncentered( rep_vector(sigma_T2,2) , L_Rho_T2 , Z2 ), matrix[2,N_dyads]:Z2 ~ normal( 0 , 1 ), cholesky_factor_corr[2]:L_Rho_T2 ~ lkj_corr_cholesky( 2 ),
sigma_T2 ~ exponential(1),
## R matrix of receiving effects transpars> matrix[18,2]:R <-
compose_noncentered( sigma_R , L_Rho_R , ZR ), matrix[2,18]:ZR ~ normal( 0 , 1 ), cholesky_factor_corr[2]:L_Rho_R ~ lkj_corr_cholesky( 2 ), vector[2]:sigma_R ~ exponential(1),
## compute correlation matrix for dyads
gq> matrix[2,2]:Rho_T <<- Chol_to_Corr( L_Rho_T ) ,
gq> matrix[2,2]:Rho_T2 <<- Chol_to_Corr( L_Rho_T2) ,
gq> matrix[2,2]:Rho_R <<- Chol_to_Corr( L_Rho_R )
)
n_dyads <- nrow(d)
monk_dat_3 <- list(
N_dyads = nrow(d),
D = d$dyad_id, dislikeAB = d$dislike_AB, dislikeBA = d$dislike_BA,likeAB = d$like_AB, likeBA = d$like_BA, A=d$A, B=d$B )
m3 <- ulam( f_dyad_3, data=monk_dat_3 , chains=4 , cores=4 , iter=2000 )
f_dyad_3 <-  alist(
dislikeAB ~ binomial( 3, pAB ),
dislikeBA ~ binomial( 3, pBA ),
logit(pAB) <- a[1] + T[D,1] + R[B,1] ,
logit(pBA) <- a[1] + T[D,2] + R[A,1],
likeAB ~ binomial( 3, qAB ),
likeBA ~ binomial( 3, qBA ),
logit(qAB) <- a[2] + T2[D,1] + R[B,2] ,
logit(qBA) <- a[2] + T2[D,2] + R[A,2],
vector[2]: a ~ normal(0,1),
## gr matrix of varying effects
transpars> matrix[N_dyads,2]:T <-
compose_noncentered( rep_vector(sigma_T,2) , L_Rho_T , Z ), matrix[2,N_dyads]:Z ~ normal( 0 , 1 ), cholesky_factor_corr[2]:L_Rho_T ~ lkj_corr_cholesky( 2 ),
sigma_T ~ exponential(1),
transpars> matrix[N_dyads,2]:T2 <-
compose_noncentered( rep_vector(sigma_T2,2) , L_Rho_T2 , Z2 ), matrix[2,N_dyads]:Z2 ~ normal( 0 , 1 ), cholesky_factor_corr[2]:L_Rho_T2 ~ lkj_corr_cholesky( 2 ),
sigma_T2 ~ exponential(1),
## R matrix of receiving effects
transpars> matrix[18,2]:R <-
compose_noncentered( sigma_R , L_Rho_R , ZR ), matrix[2,18]:ZR ~ normal( 0 , 1 ), cholesky_factor_corr[2]:L_Rho_R ~ lkj_corr_cholesky( 2 ), vector[2]:sigma_R ~ exponential(1),
## compute correlation matrix for dyads
gq> matrix[2,2]:Rho_T <<- Chol_to_Corr( L_Rho_T ) ,
gq> matrix[2,2]:Rho_T2 <<- Chol_to_Corr( L_Rho_T2) ,
gq> matrix[2,2]:Rho_R <<- Chol_to_Corr( L_Rho_R )
)
n_dyads <- nrow(d)
monk_dat_3 <- list(
N_dyads = nrow(d),
D = d$dyad_id, dislikeAB = d$dislike_AB, dislikeBA = d$dislike_BA,likeAB = d$like_AB, likeBA = d$like_BA, A=d$A, B=d$B )
m3 <- ulam( f_dyad_3, data=monk_dat_3 , chains=4 , cores=4 , iter=2000 )
precis(m2,depth=3,pars=c("Rho_T","Rho_T2", "sigma_R","Rho_R"))
f_dyad_3 <-  alist(
dislikeAB ~ binomial( 3, pAB ),
dislikeBA ~ binomial( 3, pBA ),
logit(pAB) <- a[1] + T[D,1] + R[B,1] ,
logit(pBA) <- a[1] + T[D,2] + R[A,1],
likeAB ~ binomial( 3, qAB ),
likeBA ~ binomial( 3, qBA ),
logit(qAB) <- a[2] + T2[D,1] + R[B,2] ,
logit(qBA) <- a[2] + T2[D,2] + R[A,2],
vector[2]: a ~ normal(0,1),
## gr matrix of varying effects
transpars> matrix[N_dyads,2]:T <-
compose_noncentered( rep_vector(sigma_T,2) , L_Rho_T , Z ), matrix[2,N_dyads]:Z ~ normal( 0 , 1 ), cholesky_factor_corr[2]:L_Rho_T ~ lkj_corr_cholesky( 2 ),
sigma_T ~ exponential(1),
transpars> matrix[N_dyads,2]:T2 <-
compose_noncentered( rep_vector(sigma_T2,2) , L_Rho_T2 , Z2 ), matrix[2,N_dyads]:Z2 ~ normal( 0 , 1 ), cholesky_factor_corr[2]:L_Rho_T2 ~ lkj_corr_cholesky( 2 ),
sigma_T2 ~ exponential(1),
## R matrix of receiving effects
transpars> matrix[18,2]:R <-
compose_noncentered( sigma_R , L_Rho_R , ZR ), matrix[2,18]:ZR ~ normal( 0 , 1 ), cholesky_factor_corr[2]:L_Rho_R ~ lkj_corr_cholesky( 2 ),
vector[2]:sigma_R ~ exponential(1),
## compute correlation matrix for dyads
gq> matrix[2,2]:Rho_T <<- Chol_to_Corr( L_Rho_T ) ,
gq> matrix[2,2]:Rho_T2 <<- Chol_to_Corr( L_Rho_T2) ,
gq> matrix[2,2]:Rho_R <<- Chol_to_Corr( L_Rho_R )
)
n_dyads <- nrow(d)
monk_dat_3 <- list(
N_dyads = nrow(d),
D = d$dyad_id, dislikeAB = d$dislike_AB, dislikeBA = d$dislike_BA,likeAB = d$like_AB, likeBA = d$like_BA, A=d$A, B=d$B )
m3 <- ulam( f_dyad_3, data=monk_dat_3 , chains=4 , cores=4 , iter=2000 )
precis(m2,depth=3,pars=c("Rho_T","Rho_T2", "sigma_R","Rho_R"))
precis(m2,depth=3)
t<- precis(m2,depth=3)
View(t)
t<- precis(m2,depth=3, , pars=c("Rho_T","Rho_T2","sigma_R","Rho_R") )
precis(m3,depth=3, , pars=c("Rho_T","Rho_T2","sigma_R","Rho_R") )
m3 <- ulam( f_dyad_3, data=monk_dat_3 , chains=4 , cores=4 , iter=2000 )
precis(m3,depth=3, , pars=c("Rho_T","Rho_T2","sigma_R","Rho_R") )
library(rethinking)
library(brms)
data("Achehunting")
d<-Achehunting
rm(Achehunting)
View(d)
d$success<-ifelse(d$kg.meat>0,1,0)
d$age_z<-standardize(d$age)
d$age2<-d$age^2
d$age2_z<-standardize(d$age2)
d$age2_z
m1<-brm(sucess~age_z+age2_z, family=bernoulli(),data=d)
priors1<-c(prior(normal(0,1),class="Intercept"),prior(normal(0,1),class="b"))
m1<-brm(success~age_z+age2_z, family=bernoulli(),prior=priors1,data=d)
summary(m1, prob=0.89)
conditional_effects(m1)
priors2<-c(prior(normal(0,1),class="Intercept"),prior(normal(0,1),class="b"), prior(exponential(1),class="sd"))
m2<-brm(success~age_z+age2_z+1(1|id), family=bernoulli(),prior=priors2,data=d)
m2<-brm(success~age_z+age2_z+(1|id), family=bernoulli(),prior=priors2,data=d)
summary(m2, prob=0.89)
summary(m1, prob=0.89)
summary(m2, prob=0.89)
conditional_effects(m1)
conditional_effects(m2)
conditional_effects(m1)
conditional_effects(m2)
summary(m1, prob=0.89)
summary(m2, prob=0.89)
m3<-brm(success~age_z+age2_z+(age_z|id), family=bernoulli(),prior=priors2,data=d)
##now as with varying slopes
m3<-brm(success~age_z+age2_z+(1+age_z|id), family=bernoulli(),prior=priors2,data=d)
priors3<-c(prior(normal(0,1),class="Intercept"),prior(normal(0,1),class="b"), prior(exponential(1),class="sd"), prior(lkj(2), class = "cor"))
m3<-brm(success~age_z+age2_z+(1+age_z|id), family=bernoulli(),prior=priors3,data=d)
summary(m3, prob=0.89)
conditional_effects(m2, re_formula=NULL)
m3<-brm(success~age_z+age2_z+(1+age_z|id)+(1+age2_z|id), family=bernoulli(),prior=priors3,data=d)
m3<-brm(success~age_z+age2_z+(1+age_z/age2_z|id), family=bernoulli(),prior=priors3,data=d)
summary(m3, prob=0.89)
conditional_effects(m2, re_formula=TRUE)
conditional_effects(m2)
install.packages("brmstools")
summary(m3, prob=0.89)
conditional_effects(m2, spaghetti = TRUE)
m3<-brm(success~age_z+age2_z+(1+age_z+age2_z|id), family=bernoulli(),prior=priors3,data=d)
m3<-brm(success~age_z+age2_z+(1+age_z|id), family=bernoulli(),prior=priors3,data=d)
summary(m3, prob=0.89)
View(d)
d$hours_log<-log(d$hours)
m4<-brm(success~age_z+age2_z+hours_log+(1+age_z|id), family=bernoulli(),prior=priors3,data=d)
m4<-brm(success~age_z+age2_z+hours_log+(1+age_z|id), family=bernoulli(),prior=priors3,data=d, iter=10000)
summary(m4, prob=0.89)
conditional_effects(m4)
m5<-brm(success~age_z+age2_z+mi(hours_log)+(1+age_z|id), family=bernoulli(),prior=priors3,data=d, iter=10000)
m5<-brm(bf(success~age_z+age2_z+mi(hours_log)+(1+age_z|id))+bf(hours_log|mi()~1)+set_rescor(FALSE), family=bernoulli(),prior=priors3,data=d, iter=10000)
m5<-brm(bf(success~age_z+age2_z+mi(hours_log)+(1+age_z|id))+bf(hours_log|mi()~1)+set_rescor(FALSE), family=binomial(),prior=priors3,data=d, iter=10000)
outcome <- bf(success~age_z+age2_z+mi(hours_log)+(1+age_z|id)) + bernoulli()
imputation <-bf(hours_log|mi()~1) + gaussian()
m5<-brm(outcome+imputation+set_rescor(FALSE),prior=priors3,data=d, iter=10000)
m5<-brm(outcome+imputation+set_rescor(FALSE),data=d, iter=10000)
imputation <-bf(hours_log|mi()~1) + lognormal()
m5<-brm(outcome+imputation+set_rescor(FALSE),data=d, iter=10000, cores=4)
summary(m5)
m5<-brm(outcome+imputation+set_rescor(FALSE),data=d, iter=10000, cores=4)
library(rethinking)
library(brms)
outcome <- bf(success~age_z+age2_z+mi(hours_log)+(1+age_z|id), prior=priors3) + bernoulli()
priors3<-c(prior(normal(0,1),class="Intercept"),prior(normal(0,1),class="b"), prior(exponential(1),class="sd"), prior(lkj(2), class = "cor"))
outcome <- bf(success~age_z+age2_z+mi(hours_log)+(1+age_z|id), prior=priors3) + bernoulli()
library(rethinking)
library(brms)
data("Achehunting")
d<-Achehunting
rm(Achehunting)
##Question 1. In this first problem, estimate the influence of age on the probability of trip success. Define “success” as a trip that returns any non-zero amount of meat. Ignore individual hunter identities for now. You can use any functional relationship for age and success that you think is sensible, but be sure to justify it and check it against posterior predictions.
##Including age and age2 because success should increase with age as competency grows and motivation for hunting increases (in relation to having dependents), then decreases with senecense, fewer dependents, and potentially help from offspring
d$success<-ifelse(d$kg.meat>0,1,0)
d$age_z<-standardize(d$age)
d$age2<-d$age^2
d$age2_z<-standardize(d$age2)
priors1<-c(prior(normal(0,1),class="Intercept"),prior(normal(0,1),class="b"))
m1<-brm(success~age_z+age2_z, family=bernoulli(),prior=priors1,data=d, cores=4)
summary(m1, prob=0.89)
conditional_effects(m1)
priors2<-c(prior(normal(0,1),class="Intercept"),prior(normal(0,1),class="b"), prior(exponential(1),class="sd"))
m2<-brm(success~age_z+age2_z+(1|id), family=bernoulli(),prior=priors2,data=d, cores=4)
summary(m2, prob=0.89)
conditional_effects(m2)
priors3<-c(prior(normal(0,1),class="Intercept"),prior(normal(0,1),class="b"), prior(exponential(1),class="sd"), prior(lkj(2), class = "cor"))
m3<-brm(success~age_z+age2_z+(1+age_z|id), family=bernoulli(),prior=priors3,data=d, cores=4)
summary(m3, prob=0.89)
d$hours_log<-log(d$hours)
m4<-brm(success~age_z+age2_z+hours_log+(1+age_z|id), family=bernoulli(),prior=priors3,data=d, iter=10000, cores=4)
summary(m4, prob=0.89)
m4<-brm(success~age_z+age2_z+hours_log+(1+age_z +hours_log|id), family=bernoulli(),prior=priors3,data=d, iter=10000, cores=4)
summary(m4, prob=0.89)
m4<-brm(success~age_z+age2_z+hours_log+(1+age_z |id), family=bernoulli(),prior=priors3,data=d, iter=10000, cores=4)
summary(m4, prob=0.89)
conditional_effects(m4)
outcome <- bf(success~age_z+age2_z+mi(hours_log)+(1+age_z|id), prior=priors3) + bernoulli()
outcome <- bf(success~age_z+age2_z+mi(hours_log)+(1+age_z|id), family=bernoulli(), prior=priors3)
outcome <- bf(success~age_z+age2_z+mi(hours_log)+(1+age_z|id), family=bernoulli())
imputation <-bf(hours_log|mi()~1, family= lognormal() )
get_prior(outcome+imputation+set_rescor(FALSE))
get_prior(outcome+imputation+set_rescor(FALSE), data=d)
m5<-brm(outcome+imputation+set_rescor(FALSE),data=d, iter=10000, cores=4, prior=priors3)
#success more probable with more time hunting
priors4<-c(prior(normal(0,1),class="Intercept"),prior(normal(0,1),class="b"), prior(exponential(1),class="sd", resp= success), prior(lkj(2), class = "cor"), prior(exponential(1), class = "sigma"))
outcome <- bf(success~age_z+age2_z+mi(hours_log)+(1+age_z|id), family=bernoulli())
imputation <-bf(hours_log|mi()~1, family= lognormal() )
m5<-brm(outcome+imputation+set_rescor(FALSE),data=d, iter=10000, cores=4, prior=priors4)
#success more probable with more time hunting
priors4<-c(prior(normal(0,1),class="Intercept"),prior(normal(0,1),class="b"), prior(exponential(1),class="sd", resp= success), prior(lkj(2), class = "cor"), prior(exponential(1), class = "sigma",resp= hours_log))
outcome <- bf(success~age_z+age2_z+mi(hours_log)+(1+age_z|id), family=bernoulli())
imputation <-bf(hours_log|mi()~1, family= lognormal() )
m5<-brm(outcome+imputation+set_rescor(FALSE),data=d, iter=10000, cores=4, prior=priors4)
#success more probable with more time hunting
priors4<-c(prior(normal(0,1),class="Intercept"),prior(normal(0,1),class="b"), prior(exponential(1),class="sd", resp= success), prior(lkj(2), class = "cor"), prior(exponential(1), class = "sigma",resp= mihours_log))
outcome <- bf(success~age_z+age2_z+mi(hours_log)+(1+age_z|id), family=bernoulli())
imputation <-bf(hours_log|mi()~1, family= lognormal() )
m5<-brm(outcome+imputation+set_rescor(FALSE),data=d, iter=10000, cores=4, prior=priors4)
#success more probable with more time hunting
priors4<-c(prior(normal(0,1),class="Intercept"),prior(normal(0,1),class="b"), prior(exponential(1),class="sd", resp= success), prior(lkj(2), class = "cor"), prior(exponential(1), class = "sigma",resp= hourslog ))
outcome <- bf(success~age_z+age2_z+mi(hours_log)+(1+age_z|id), family=bernoulli())
imputation <-bf(hours_log|mi()~1, family= lognormal() )
m5<-brm(outcome+imputation+set_rescor(FALSE),data=d, iter=10000, cores=4, prior=priors4)
d$hours_log
#success more probable with more time hunting
priors4<-c(prior(normal(0,1),class="Intercept", resp= success),prior(normal(0,1),class="b", resp= success), prior(exponential(1),class="sd", resp= success), prior(lkj(2), class = "cor", resp= success), prior(exponential(1), class = "sigma",resp= hourslog ), prior(lognormal(0,1), class = "Intercept",resp= hourslog ))
outcome <- bf(success~age_z+age2_z+mi(hours_log)+(1+age_z|id), family=bernoulli())
imputation <-bf(hours_log|mi()~1, family= lognormal() )
m5<-brm(outcome+imputation+set_rescor(FALSE),data=d, iter=10000, cores=4, prior=priors4)
get_prior(outcome+imputation+set_rescor(FALSE), data=d)
#success more probable with more time hunting
priors4<-c(prior(normal(0,1),class="Intercept", resp= success),prior(normal(0,1),class="b", resp= success), prior(exponential(1),class="sd", resp= success), prior(exponential(1), class = "sigma",resp= hourslog ), prior(lognormal(0,1), class = "Intercept",resp= hourslog ))
outcome <- bf(success~age_z+age2_z+mi(hours_log)+(1+age_z|id), family=bernoulli())
imputation <-bf(hours_log|mi()~1, family= lognormal() )
m5<-brm(outcome+imputation+set_rescor(FALSE),data=d, iter=10000, cores=4, prior=priors4)
#success more probable with more time hunting
priors4<-c(prior(normal(0,1),class="Intercept", resp= success),prior(normal(0,1),class="b", resp= success), prior(exponential(1),class="sd", resp= success), prior(exponential(1), class = "sigma",resp= hourslog ), prior(normal(0,1), class = "Intercept",resp= hourslog ))
outcome <- bf(success~age_z+age2_z+mi(hours_log)+(1+age_z|id), family=bernoulli())
imputation <-bf(hours_log|mi()~1, family= gaussian() )
m5<-brm(outcome+imputation+set_rescor(FALSE),data=d, iter=10000, cores=4, prior=priors4)
summary(m5)
get_prior(outcome+imputation+set_rescor(FALSE), data=d)
get_prior(outcome+imputation+set_rescor(FALSE), data=d)
#success more probable with more time hunting
priors4<-c(prior(normal(0,1),class="Intercept", resp= success),prior(normal(0,1),class="b", resp= success), prior(exponential(1),class="sd", resp= success), prior(exponential(1), class = "sigma",resp= hourslog ), prior(normal(0,1), class = "Intercept",resp= hourslog ))
m5<-brm(outcome+imputation+set_rescor(FALSE),data=d, iter=10000, cores=4, prior=priors4)
summary(m5)
mean(d$hours, na.rm=TRUE)
summary(m4, prob=0.89)
summary_m5<-summary(m5, prob=0.89)
summary_m5
conditional_effects(m5)
pp_check(m5)
pp_check(m5, resp="success")
pp_check(m5, resp="hourlog")
pp_check(m5, resp="hourslog")
d$missing<-ifelse(is.na(d$hours),1,0)
d$missing
m_mi<-brm(missing~age_z+(1|id), data=d, cores=4, family=binomial())
library(rethinking)
library(brms)
data("Achehunting")
d<-Achehunting
rm(Achehunting)
d$success<-ifelse(d$kg.meat>0,1,0)
d$age_z<-standardize(d$age)
d$age2<-d$age^2
d$age2_z<-standardize(d$age2)
d$hours_log<-log(d$hours)
m4<-brm(success~age_z+age2_z+hours_log+(1+age_z |id), family=bernoulli(),prior=priors3,data=d, iter=10000, cores=4)
#success more probable with more time hunting
priors4<-c(prior(normal(0,1),class="Intercept", resp= success),prior(normal(0,1),class="b", resp= success), prior(exponential(1),class="sd", resp= success), prior(exponential(1), class = "sigma",resp= hourslog ), prior(normal(0,1), class = "Intercept",resp= hourslog ))
#success more probable with more time hunting
d$missing<-ifelse(is.na(d$hours),1,0)
m_mi<-brm(missing~age_z+(1|id), data=d, cores=4, family=bernoulli())
m_mi<-brm(missing~age_z+(1|id), data=d, cores=4, iter=10000, family=bernoulli())
summary(m_mi, prob=0.89)
m_mi<-brm(missing~age_z+ age2_z+(1|id), data=d, cores=4, iter=10000, family=bernoulli())
summary(m_mi, prob=0.89)
priors4<-c(prior(normal(0,1),class="Intercept", resp= success),prior(normal(0,1),class="b", resp= success), prior(exponential(1),class="sd", resp= success), prior(exponential(1), class = "sigma",resp= hourslog ), prior(normal(0,1), class = "Intercept",resp= hourslog ))
priors4<-c(prior(normal(0,1),class="Intercept", resp= success),prior(normal(0,1),class="b", resp= success), prior(exponential(1),class="sd", resp= success), prior(exponential(1), class = "sigma",resp= hourslog ), prior(normal(0,1), class = "Intercept",resp= hourslog ), prior(exponential(1),class="sd", resp= hourslog))
outcome <- bf(success~age_z+age2_z+mi(hours_log)+(1+age_z|id), family=bernoulli())
imputation <-bf(hours_log|mi()~age_z+age2+z+(1|id), family= gaussian())
m5<-brm(outcome+imputation+set_rescor(FALSE),data=d, iter=10000, cores=4, prior=priors4)
imputation <-bf(hours_log|mi()~age_z+age2_z+(1|id), family= gaussian())
m5<-brm(outcome+imputation+set_rescor(FALSE),data=d, iter=10000, cores=4, prior=priors4)
summary_m5<-summary(m5, prob=0.89)
summary_m5
pp_check(m5, resp="hourslog")
priors4<-c(prior(normal(0,1),class="Intercept", resp= success),prior(normal(0,1),class="b", resp= success), prior(exponential(1),class="sd", resp= success), prior(exponential(1), class = "sigma",resp= hourslog ), prior(lognormal(0,1), class = "Intercept",resp= hourslog ), prior(exponential(1),class="sd", resp= hourslog))
outcome <- bf(success~age_z+age2_z+mi(hours_log)+(1+age_z|id), family=bernoulli())
imputation <-bf(hours_log|mi()~age_z+age2_z+(1|id), family= gaussian())
m5<-brm(outcome+imputation+set_rescor(FALSE),data=d, iter=10000, cores=4, prior=priors4)
summary_m5<-summary(m5, prob=0.89)
pp_check(m5, resp="hourslog")
summary_m5
summary(m4, prob=0.89)
library(testthat)
library(dplyr)
library(rgdal)
library(geos)
library(httr)
library(rnaturalearth)
library(sf)
library(rnaturalearthdata)
library(ggplot2)
library(brms)
library(rethinking)
library(ggpubr)
library(bayesplot)
library(tidyr)
library(lme4)
setwd("~/Documents/GitHub/Toys-As-Teachers/Frontiers")
library(testthat)
library(dplyr)
library(rgdal)
library(geos)
library(httr)
library(rnaturalearth)
library(sf)
library(rnaturalearthdata)
library(ggplot2)
library(brms)
library(rethinking)
library(ggpubr)
library(bayesplot)
library(tidyr)
library(lme4)
library(irr)
library(rel)
######################
###Recode variables###
######################
d$scale.recode<-as.factor(ifelse(d$Scale=="ChildOnly",0, 1))
d$play.recode<-ifelse(d$Play=="Play",1,0)
d$play.iv<-d$play.recode%>%replace_na("unknown")
d$play.recode<-as.factor(d$play.recode)
d$play.iv<-as.factor(d$play.iv)
d$simpleComp.recode<-as.factor(ifelse(d$simpleComp=="Comp",1,0))
d$risk.recode<-as.factor(ifelse(d$risk=="risky",1,0))
d$Social.recode<-as.factor(ifelse(d$Social=="Social",1,0))
d$ref<-coerce_index(d$Reference)
d$Gender<-factor(d$Gender,levels=c("Girls","Boys","Both/Unspecified"))
d$age.recode<-recode(d$Age,ADOLESCENCE="Older",`MIDDLE CHILDHOOD`="Older",`EARLY CHILDHOOD`="Younger",Unspecified="Unknown")
d$age.recode<-as.factor(d$age.recode)
d$age.recode<-relevel(d$age.recode,ref="Younger")
d$Type.recode<-recode(d$Type,`Animal Figure`="Figures",`Human figure`="Figures",Instrument="Subsistence",`Tended facility`="Subsistence",`Untended facility`="Subsistence",Game="Games",PhysGame="Games")
d$mult<-ifelse(d$Multiple.Uses=="Multiple",1,0)
d$toycon<-ifelse(d$Toycon=="Toycon",1,0)
d<-read.csv("data_complete.csv")
######################
###Recode variables###
######################
d$scale.recode<-as.factor(ifelse(d$Scale=="ChildOnly",0, 1))
d$play.recode<-ifelse(d$Play=="Play",1,0)
d$play.iv<-d$play.recode%>%replace_na("unknown")
d$play.recode<-as.factor(d$play.recode)
d$play.iv<-as.factor(d$play.iv)
d$simpleComp.recode<-as.factor(ifelse(d$simpleComp=="Comp",1,0))
d$risk.recode<-as.factor(ifelse(d$risk=="risky",1,0))
d$Social.recode<-as.factor(ifelse(d$Social=="Social",1,0))
d$ref<-coerce_index(d$Reference)
d$Gender<-factor(d$Gender,levels=c("Girls","Boys","Both/Unspecified"))
d$age.recode<-recode(d$Age,ADOLESCENCE="Older",`MIDDLE CHILDHOOD`="Older",`EARLY CHILDHOOD`="Younger",Unspecified="Unknown")
d$age.recode<-as.factor(d$age.recode)
d$age.recode<-relevel(d$age.recode,ref="Younger")
d$Type.recode<-recode(d$Type,`Animal Figure`="Figures",`Human figure`="Figures",Instrument="Subsistence",`Tended facility`="Subsistence",`Untended facility`="Subsistence",Game="Games",PhysGame="Games")
d$mult<-ifelse(d$Multiple.Uses=="Multiple",1,0)
d$toycon<-ifelse(d$Toycon=="Toycon",1,0)
########################################
###Set Priors and make psign function###
########################################
prior1<-c(prior(normal(0,1),class=b,nlpar=a), prior(normal(0,1),class=b,nlpar=b), prior(exponential(1),class=sd,nlpar=d))
prior2<-c(prior(normal(0,1),class=b,nlpar=a), prior(normal(0,1),class=b,nlpar=b),prior(normal(0,1),class=b,nlpar=c),  prior(exponential(1),class=sd,nlpar=d))
prior3<-c(prior(normal(0,1),class=b), prior(exponential(1),class=sd))
prior4<-c(prior(normal(0,1),class=Intercept),prior(exponential(1),class=sd))
View(d)
d$test<-ifelse(d$Play_vs_use=="Play","Play", ifelse(d$Play_vs_use=="Use","Use","Multi"))
d$test
E1<-brm(test~ 1 +  (1| Continent) + (1|Society) + (1|ref)+ (1|randomNumber),family=categorical(), data = d, cores=4, iter=5000 ,prior=prior4,control=list(adapt_delta=0.99) )
get_prior(test~ 1 +  (1| Continent) + (1|Society) + (1|ref)+ (1|randomNumber),family=categorical(), data = d)
get_prior(test~ 1 +  (1| Continent) + (1|Society) + (1|ref)+ (1|randomNumber),family=categorical(), data = d)
d$test<-relevel(d$test, ref="Use")
d$test
d$test<-relevel(d$test, ref="Use")
d$test<-relevel(factor(d$test), ref="Use")
d$test
get_prior(test~ 1 +  (1| Continent) + (1|Society) + (1|ref)+ (1|randomNumber),family=categorical(), data = d)
prior5<-c(prior(normal(0,1),class=Intercept),prior(exponential(1),class=sd, dpar=muMulti),prior(exponential(1),class=sd, dpar=muPlay))
E1<-brm(test~ 1 +  (1| Continent) + (1|Society) + (1|ref)+ (1|randomNumber),family=categorical(), data = d, cores=4, iter=5000 ,prior=prior5,control=list(adapt_delta=0.99) )
summary(E1, prob=0.89)
inv_logit(1.29)
inv_logit(0.19)
###########PLAY############################################
post_E1<-posterior_samples(E1)
View(post_E1)
round(median(inv_logit(post_E1$b_muMultiIntercept)),2)
round(median(inv_logit(post_E1$b_muMulti_Intercept)),2)
round(median(inv_logit(post_E1$b_muPlay_Intercept)),2)
